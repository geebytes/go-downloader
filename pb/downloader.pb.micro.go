// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pb/downloader.proto

package pb

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Downloader service

func NewDownloaderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Downloader service

type DownloaderService interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (*DownloadResponse, error)
}

type downloaderService struct {
	c    client.Client
	name string
}

func NewDownloaderService(name string, c client.Client) DownloaderService {
	return &downloaderService{
		c:    c,
		name: name,
	}
}

func (c *downloaderService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "Downloader.Download", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Downloader service

type DownloaderHandler interface {
	Download(context.Context, *DownloadRequest, *DownloadResponse) error
}

func RegisterDownloaderHandler(s server.Server, hdlr DownloaderHandler, opts ...server.HandlerOption) error {
	type downloader interface {
		Download(ctx context.Context, in *DownloadRequest, out *DownloadResponse) error
	}
	type Downloader struct {
		downloader
	}
	h := &downloaderHandler{hdlr}
	return s.Handle(s.NewHandler(&Downloader{h}, opts...))
}

type downloaderHandler struct {
	DownloaderHandler
}

func (h *downloaderHandler) Download(ctx context.Context, in *DownloadRequest, out *DownloadResponse) error {
	return h.DownloaderHandler.Download(ctx, in, out)
}
